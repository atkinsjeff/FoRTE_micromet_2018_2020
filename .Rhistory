p = 0.05, nperm = 999, seed = 666)
# selected variables
rf.top.temp$selvars
rf.effectSize(rf.top.temp$rf.final, y = df.top$dmoch, pred.data = df.top[ ,4:13], x.var = dmoch )
### CROSS VALIDATION
x11(width = 8, height = 8)
par(mfrow=c(2,2))
for(i in rf.top.temp$selvars){
rf.partial.ci(m = rf.top.temp$rf.final, x = df.top[ , c("top_rugosity", "porosity", "moch", "cover_fraction")], yname = "Soil Temp.", xname = i, delta = TRUE, lci = 0.025, uci = 0.975)
}
rf.bot.temp.sd <- rf.modelSel(df.bottom[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean", "cover_fraction")],
df.bottom[,"temp.sd"], seed = 666, imp.scale = "mir", final.model = TRUE,  ntree = 2000, parsimony = 0.1 )
# correlation
cor(rf.bot.temp.sd$rf.final$y, rf.bot.temp.sd$rf.final$predicted)
rf.bot.temp.sd$rf.final
# print vars
rf.bot.temp.sd$selvars
p <- as.matrix(rf.top.temp$rf.final$importance)
ord <- rev(order(p[,1], decreasing=TRUE)[1:dim(p)[1]])
x11()
dotchart(p[ord,1], main="Scaled Variable Importance", pch=19)
p <- as.matrix(rf.top.temp.sd$rf.final$importance)
p <- as.matrix(rf.bot.temp.sd$rf.final$importance)
ord <- rev(order(p[,1], decreasing=TRUE)[1:dim(p)[1]])
x11()
dotchart(p[ord,1], main="Scaled Variable Importance", pch=19)
### CROSS VALIDATION
x11(width = 8, height = 8)
par(mfrow=c(2,2))
for(i in rf.bot.temp.sd$selvars){
rf.partial.ci(m = rf.bot.temp.sd$rf.final, x = df.top[ , c("richness", "sw.index", "rugosity", "cover_fraction")], yname = "Soil Temp. SD", xname = i, delta = TRUE, lci = 0.025, uci = 0.975)
}
rf.regression.fit(rf.bot.temp.sd$rf.final)
cor(rf.bot.temp.sd$rf.final$y, rf.bot.temp.sd$rf.final$predicted)
rf.significance(rf.bot.temp.sd$rf.final, df.bottom[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean", "cover_fraction")], , p = 0.05, nperm = 999, seed = 666)
rf.bot.temp.sd$rf.final
cor(rf.bot.temp.sd$rf.final$y, rf.bot.temp.sd$rf.final$predicted)
rf.top.vwc.sd <- rf.modelSel(df.top[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean","moch","cover_fraction")],
df.top[,"vwc.sd"], seed = 666, imp.scale = "mir", final.model = TRUE,  ntree = 2000 )
rf.top.vwc.sd
cor(rf.top.vwc.sd$rf.final$y, rf.top.vwc.sd$rf.final$predicted)
rf.top.vwc.sd <- rf.modelSel(df.top[ , c("richness","evenness","dbh.sd","ba","gini","dbh_shan","fhd","cover_fraction")],
df.top[,"vwc.sd"], seed = 666, imp.scale = "mir", final.model = TRUE,  ntree = 2000 )
rf.top.vwc.sd
cor(rf.top.vwc.sd$rf.final$y, rf.top.vwc.sd$rf.final$predicted)
rf.top.vwc.sd$selvars
# top
rf.top.vwc.sd <- rf.modelSel(df.top[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean","moch","cover_fraction")],
df.top[,"vwc.sd"], seed = 666, imp.scale = "mir", final.model = TRUE,  ntree = 2000 )
rf.top.vwc.sd
cor(rf.top.vwc.sd$rf.final$y, rf.top.vwc.sd$rf.final$predicted)
rf.top.vwc.sd <- rf.modelSel(df.top[ , c("richness","evenness","dbh.sd","ba","gini","dbh_shan","fhd","cover_fraction")],
df.top[,"vwc.sd"], seed = 666, imp.scale = "mir", final.model = TRUE,  ntree = 2000 )
rf.top.vwc.sd
cor(rf.top.vwc.sd$rf.final$y, rf.top.vwc.sd$rf.final$predicted)
rf.top.vwc.sd$selvars
# top
rf.top.vwc.sd <- rf.modelSel(df.top[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean","moch","cover_fraction")],
df.top[,"vwc.sd"], seed = 666, imp.scale = "mir", final.model = TRUE,  ntree = 2000 )
rf.top.vwc.sd
rf.top.vwc.sd$selvars
rf.top.vwc.sd <- rf.modelSel(df.top[ , c("sw.index", "evenness","dbh.sd","ba","gini","dbh_shan","fhd","cover_fraction")],
df.top[,"vwc.sd"], seed = 666, imp.scale = "mir", final.model = TRUE,  ntree = 2000 )
rf.top.vwc.sd
cor(rf.top.vwc.sd$rf.final$y, rf.top.vwc.sd$rf.final$predicted)
rf.top.vwc.sd <- rf.modelSel(df.top[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean","moch","cover_fraction")],
df.top[,"vwc.sd"], seed = 666, imp.scale = "mir", final.model = TRUE,  ntree = 2000 )
rf.top.vwc.sd
cor(rf.top.vwc.sd$rf.final$y, rf.top.vwc.sd$rf.final$predicted)
rf.top.vwc.sd$selvars
rf.top.vwc.sd <- rf.modelSel(df.top[ , c("sw.index", "evenness","dbh.sd","ba","gini","dbh_shan","fhd","cover_fraction")],
df.top[,"vwc.sd"], seed = 666, imp.scale = "mir", final.model = TRUE,  ntree = 2000 )
rf.top.vwc.sd
cor(rf.top.vwc.sd$rf.final$y, rf.top.vwc.sd$rf.final$predicted)
rf.top.vwc.sd$selvars
rf.regression.fit(rf.top.vwc.sd$rf.final)
rf.significance(rf.top.vwc.sd$rf.final, df.top[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean","moch","cover_fraction")], p = 0.05, nperm = 999, seed = 666)
rf.top.vwc.sd <- rf.modelSel(df.top[ , c("sw.index", "richness", "evenness","dbh.sd","ba","gini","dbh_shan","fhd","cover_fraction")],
df.top[,"vwc.sd"], seed = 666, imp.scale = "mir", final.model = TRUE,  ntree = 2000 )
rf.top.vwc.sd
cor(rf.top.vwc.sd$rf.final$y, rf.top.vwc.sd$rf.final$predicted)
rf.top.vwc.sd$selvars
rf.top.vwc.sd <- rf.modelSel(df.top[ , c("sw.index", "richness", "gini","dbh_shan","fhd","cover_fraction")],
df.top[,"vwc.sd"], seed = 666, imp.scale = "mir", final.model = TRUE,  ntree = 2000 )
rf.top.vwc.sd
cor(rf.top.vwc.sd$rf.final$y, rf.top.vwc.sd$rf.final$predicted)
rf.bot.vwc <- rf.modelSel(df.bottom[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean", "cover_fraction")],
df.bottom[,"vwc"], seed = 666, imp.scale = "mir", final.model = TRUE,  ntree = 2000 )
rf.bot.vwc$rf.final
cor(rf.bot.vwc$rf.final$y, rf.bot.vwc$rf.final$predicted)
rf.bot.vwc$selvars
rf.regression.fit(rf.bot.vwc$rf.final)
# correlation
cor(rf.top.temp$rf.final$y, rf.top.temp$rf.final$predicted)
rf.top.temp$selvars
rf.regression.fit(rf.top.temp$rf.final)
rf.significance(rf.top.temp$rf.final, df.top[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean","moch","cover_fraction")],
p = 0.05, nperm = 999, seed = 666)
# selected variables
rf.top.temp$selvars
# bottom-up
rf.bot.temp.sd <- rf.modelSel(df.bottom[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean", "cover_fraction")],
df.bottom[,"temp.sd"], seed = 666, imp.scale = "mir", final.model = TRUE,  ntree = 2000, parsimony = 0.1 )
# correlation
cor(rf.bot.temp.sd$rf.final$y, rf.bot.temp.sd$rf.final$predicted)
rf.bot.temp.sd$rf.final
# print vars
rf.bot.temp.sd$selvars
rf.regression.fit(rf.bot.temp.sd$rf.final)
require(fortedata)
require(lubridate)
require(tidyverse)
require(Boruta)
require(Metrics)
require(carat)
require(corrplot)
require(MuMIn)
require(relaimpo)
require(gridExtra)
require(cowplot)
require(vegan)
require(rfUtilities)
# # bring in metadata
# df <- fortedata::fd_plot_metadata()
#
# df <- data.frame(df)
# df$subplot_id <- paste(df$replicate, 0, df$plot, df$subplot, sep = "")
# df$subplot_id <- as.factor(df$subplot_id)
#
# df %>%
#     dplyr::select(subplot_id, disturbance_severity, treatment) %>%
#     distinct() %>%
#     data.frame() %>%
#     na.omit() -> dis.meta.data
#
##### IMPORT DATA FRAME FROM 01_data_import
df <- df.all[, c("subplot_id","disturbance_severity", "treatment", "name", "diffMean")]
# or
#df <- read.csv("analysis_ready.csv")
# pivot wider
df %>%
pivot_wider(names_from = "name",
values_from = c("diffMean")) %>%
data.frame() -> df
# remove NA
df <- na.omit(df)
# bring in met data
met <- data.frame(fortedata::fd_soil_respiration())
met$year <- as.factor(format(as.Date(met$date, format = "%Y-%m-%d"), "%Y"))
# organize
met %>%
# select(subplot_id, date, soil_temp, vwc) %>%
group_by(subplot_id) %>%
dplyr::filter(between(date, as.Date("2020-06-01"), as.Date("2020-08-31"))) %>%
dplyr::summarize(temp = mean(soil_temp, na.rm = TRUE),
vwc = mean(vwc, na.rm = TRUE)) %>%
data.frame() -> x
met %>%
# select(subplot_id, date, soil_temp, vwc) %>%
group_by(subplot_id) %>%
dplyr::filter(between(date, as.Date("2020-06-01"), as.Date("2020-08-31"))) %>%
dplyr::summarize(temp.sd = sd(soil_temp, na.rm = TRUE),
vwc.sd = sd(vwc, na.rm = TRUE)) %>%
data.frame() -> y
# bring em together
x <- merge(x, y)
df <- merge(df, x)
# light data
par <- data.frame(fortedata::fd_ceptometer())
# quick par test
par$TEST <- ifelse(is.na(par$notes), 1, 0)
x11()
ggplot(par, aes(x = fapar, color = as.factor(TEST)))+
geom_boxplot()
par$year <- year(par$timestamp)
####
par %>%
#filter(between(timestamp, as.Date("2020-06-01"), as.Date("2020-08-31"))) %>%
filter(year == 2020) %>%
group_by(subplot_id) %>%
dplyr::summarize(par = mean(fapar, na.rm = TRUE)) %>%
data.frame() -> z
#### all together now
df <- merge(df, z)
# correct issues with richness
df[df == 0] <- 1
### SORT TO TOP AND BOTTOM
#write.csv(df, "atkins_test_data.csv")
#### AOV
####
summary(aov(temp ~ disturbance_severity * treatment, data = df))
summary(aov(temp.sd ~ disturbance_severity * treatment, data = df))
summary(aov(vwc ~ disturbance_severity * treatment, data = df))
summary(aov(vwc.sd ~ disturbance_severity * treatment, data = df))
summary(aov(par ~ disturbance_severity * treatment, data = df))
# filter to top and bottom
df %>%
dplyr::filter(treatment == "B") -> df.bottom
df %>%
dplyr::filter(treatment == "T") -> df.top
df.bottom <- na.omit(df.bottom)
multi.collinear(df.bottom[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean","moch","max_ht", "p10", "p25",
"p50", "p75","p90","cover_fraction")], p=0.05,  leave.out = TRUE, n = 999)
#function in the rfUtilities library. If any variables are identified as multicolinear we will remove them from the model.
df.bottom.test <- df.bottom[ ,c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean","moch","max_ht", "p10", "p25",
"p50", "p75","p90","cover_fraction")]
set.seed(666)
rf.bot.temp <- rf.modelSel(df.bottom[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean", "cover_fraction")],
df.bottom[,"temp"], seed = 666, r = c(0.25, 0.5, 0.75), imp.scale = "mir", final.model = TRUE, ntree = 5000, parsimony = 0.1)
rf.bot.temp <- rf.modelSel(df.bottom[ ,c( "rugosity", "top_rugosity", "clumping_index", "cover_fraction" )],
df.bottom[,"temp"], seed = 666, r = c(0.25, 0.5, 0.75), imp.scale = "mir", final.model = TRUE, ntree = 5000, parsimony = 0.1 )
x11()
plot(rf.bot.temp) # plot importance for selected variables
rf.bot.temp$rf.final
# correlation
cor(rf.bot.temp$rf.final$y, rf.bot.temp$rf.final$predicted)
rf.bot.temp$selvars
rf.top.temp <- rf.modelSel(df.top[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean","moch","cover_fraction")],
df.top[,"temp"], seed = 666, imp.scale = "se", final.model = TRUE,  ntree = 2000, parsimony = 0.01 )
x11()
plot(rf.top.temp) # plot importance for selected variables
rf.top.temp$rf.final
# correlation
cor(rf.top.temp$rf.final$y, rf.top.temp$rf.final$predicted)
rf.top.temp$selvars
# bottom-up
rf.bot.temp.sd <- rf.modelSel(df.bottom[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean", "cover_fraction")],
df.bottom[,"temp.sd"], seed = 666, imp.scale = "mir", final.model = TRUE,  ntree = 2000, parsimony = 0.1 )
# correlation
cor(rf.bot.temp.sd$rf.final$y, rf.bot.temp.sd$rf.final$predicted)
rf.bot.temp.sd$rf.final
# print vars
rf.bot.temp.sd$selvars
rf.regression.fit(rf.bot.temp.sd$rf.final)
rf.significance(rf.bot.temp.sd$rf.final, df.bottom[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean", "cover_fraction")], , p = 0.05, nperm = 999, seed = 666)
# top
rf.top.temp.sd <- rf.modelSel(df.top[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean","moch","cover_fraction")],
df.top[,"temp.sd"], seed = 666, imp.scale = "mir", final.model = TRUE,  ntree = 5000, parsimony = 0.01 )
# rf.top.temp.sd <- rf.modelSel(df.top[ , c("evenness","gini","dbh_shan","rugosity","fhd","moch","cover_fraction")],
#                               df.top[,"temp.sd"], seed = 666, imp.scale = "mir", final.model = TRUE,  ntree = 5000, parsimony = 0.01 )
rf.top.temp.sd$rf.final
cor(rf.top.temp.sd$rf.final$y, rf.top.temp.sd$rf.final$predicted)
rf.top.temp.sd$selvars
rf.regression.fit(rf.top.temp.sd$rf.final)
rf.significance(rf.top.temp.sd$rf.final, df.top[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean","moch","cover_fraction")], p = 0.05, nperm = 999, seed = 666)
rf.bot.vwc <- rf.modelSel(df.bottom[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean", "cover_fraction")],
df.bottom[,"vwc"], seed = 666, imp.scale = "mir", final.model = TRUE,  ntree = 2000 )
rf.bot.vwc$rf.final
cor(rf.bot.vwc$rf.final$y, rf.bot.vwc$rf.final$predicted)
rf.bot.vwc$selvars
rf.regression.fit(rf.bot.vwc$rf.final)
rf.bot.vwc <- rf.modelSel(df.bottom[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean", "cover_fraction")],
df.bottom[,"vwc"], seed = 420, imp.scale = "mir", final.model = TRUE,  ntree = 2000 )
rf.bot.vwc$rf.final
rf.bot.vwc <- rf.modelSel(df.bottom[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean", "cover_fraction")],
df.bottom[,"vwc"], seed = 666, imp.scale = "mir", final.model = TRUE,  ntree = 2000 )
rf.bot.vwc$rf.final
# bottom-up
rf.bot.vwc <- rf.modelSel(df.bottom[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean", "cover_fraction")],
df.bottom[,"vwc"], seed = 666, imp.scale = "mir", final.model = TRUE,  ntree = 5000 )
rf.bot.vwc$rf.final
cor(rf.bot.vwc$rf.final$y, rf.bot.vwc$rf.final$predicted)
rf.bot.vwc$selvars
rf.regression.fit(rf.bot.vwc$rf.final)
rf.significance(rf.bot.vwc$rf.final, df.bottom[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean", "cover_fraction")], p = 0.05, nperm = 999, seed = 666)
rf.top.vwc <- rf.modelSel(df.top[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean","moch","cover_fraction")],
df.top[,"vwc"], seed = 666, imp.scale = "mir", final.model = TRUE, ntree = 5000, parismony = 0.05 )
rf.top.vwc$rf.final
cor(rf.top.vwc$rf.final$y, rf.top.vwc$rf.final$predicted)
rf.top.vwc$selvars
rf.top.vwc <- rf.modelSel(df.top[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean","moch","cover_fraction")],
df.top[,"vwc"], seed = 666, imp.scale = "se", final.model = TRUE, ntree = 5000, parismony = 0.05 )
rf.top.vwc$rf.final
cor(rf.top.vwc$rf.final$y, rf.top.vwc$rf.final$predicted)
df
rf.top.vwc <- rf.modelSel(df.top[ , c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan","rugosity","top_rugosity",
"enl","fhd","porosity","clumping_index","mean_height_mean","moch","cover_fraction")],
df.top[,"vwc"], seed = 666, imp.scale = "se", final.model = TRUE, ntree = 5000, parismony = 0.1 )
rf.top.vwc$rf.final
cor(rf.top.vwc$rf.final$y, rf.top.vwc$rf.final$predicted)
randomForest(vwc ~ moch + cover_fraction + evenness + top_rugosity, data = df.top, ntree=5000,
keep.forest=FALSE, importance=TRUE)
install.packages("spatialEco")
invisible(lapply(c("randomForest", "rfUtilities",
"ranger", "pdp", "spatialEco"),require,
character.only=TRUE))
install.packages(
"pdp"
)
source("./R/rf.ImpScale.R")
pfun <- function(object, newdata, i = 2) {
predict(object, data = newdata)$predictions[,i]
}
rmse <- function(y,x) { sqrt(mean((y - x)^2)) }
set.seed(666)
#***********************************************
# read and filter top/bottom treatments
dat <- read.csv("atkins_test_data.csv")
df.bottom <- na.omit(dat[dat$treatment == "B",])
df.top <- na.omit(dat[dat$treatment == "T",])
# full variable list
all.vars <- c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan",
"rugosity","top_rugosity", "enl","fhd","porosity","clumping_index",
"mean_height_mean","moch","max_ht", "p10", "p25",
"p50", "p75","p90","cover_fraction")
# Evaluate colinearity and multicolinearity
# remove collinearity
cl.vars <- spatialEco::collinear(df.bottom[,all.vars], p = 0.85,
nonlinear = FALSE, p.value = 0.001)
if(length(cl.vars) > 0) {
cat("Dropping colinear variables; ", cl.vars, "\n")
df.bottom <- df.bottom[,-which(names(df.bottom) %in% cl.vars)]
vars <- all.vars[-which(all.vars %in% cl.vars)]
} else {
cat("No collinear variable found", "\n")
}
# multicolinearity
( mc <- multi.collinear(df.bottom[,vars], p=0.005,  perm = TRUE, n = 999) )
mc.vars <- mc[which( mc$frequency > 5 ),]$variables
if(length(mc.vars) > 0) {
df.bottom <- df.bottom[,-which(names(df.bottom) %in% mc.vars)]
} else {
cat("No multicollinear variable found", "\n")
}
b = 501 # number of bootstraps
# Evaluate importance significance
( imp.reg <- ranger(x=df.bottom[,vars], y=df.bottom[,"temp"],
importance = "permutation",
num.trees=b) )
( imp <- na.omit(rf.ImpScale(imp.reg, scaling="p", n=59)) )
( imp.vars <- imp[imp$importance > 0 & imp$pvalue <= 0.1,]$parameter )
# ( imp.vars <- imp[imp$importance > 0,]$parameter )
# Fit model
( bot.fit <- ranger(x=df.bottom[,imp.vars], y=df.bottom[,"temp"],
importance = "permutation", num.trees=b,
keep.inbag=TRUE) )
cat("R-square of model:", bot.fit$r.squared, "\n")
cat("Prediction RMSE:", rmse(df.bottom[,"temp"], bot.fit$predictions), "\n")
cat("Prediction correlation:", cor(df.bottom[,"temp"], bot.fit$predictions), "\n")
# Plot importance
p <- imp[which(imp$parameter %in% imp.vars),]
p <- p[order(p$importance),]
dotchart(p$importance, labels = p$parameter,
main="Scaled Variable Importance", pch=19)
# Jackknife validation
x <- df.bottom[,imp.vars]
y <- df.bottom[,"temp"]
midx <- 1:length(y)
error <- vector()
serror <- vector()
r.sqr <- vector()
j=0
for(i in midx) {
j=j+1
cat("Running obs ", j, " of ", length(midx), "\n")
rfv <- ranger(x=x[-i,], y=y[-i],
num.trees = b,
importance="permutation")
error <- append(error, rfv$prediction.error)
serror <- append(serror, rmse(y[-i], rfv$predictions))
r.sqr <- append(r.sqr, rfv$r.squared)
}
jackknife <- data.frame(y=y, error=error,
rmse=serror, r.sqr=r.sqr)
cat("Median Jackknife R-square:", median(serror), "\n")
cat("Median Jackknife RMSE:", median(serror), "\n")
cat("Median Jackknife Prediction Error:", median(error), "\n")
plot(density(error), main="Jackknife prediction error")
abline(v=bot.fit$prediction.error, col="red")
plot(density(serror), main="Jackknife RMSE")
abline(v=rmse(df.bottom[,"temp"], bot.fit$predictions), col="red")
x11()
plot(density(error), main="Jackknife prediction error")
abline(v=bot.fit$prediction.error, col="red")
x11()
plot(density(serror), main="Jackknife RMSE")
abline(v=rmse(df.bottom[,"temp"], bot.fit$predictions), col="red")
se <- suppressWarnings(predict(bot.fit, df.bottom[,imp.vars],
type = "se", se.method = "infjack"))
scalar = (se$predictions * 1.96) / max((se$predictions * 1.96))
ci95 <- data.frame(
y = df.bottom[,"temp"],
pred = bot.fit$predictions,
std.err=se$se,
lower.ci = bot.fit$predictions - scalar,
upper.ci = bot.fit$predictions + scalar)
sort.idx <- sort(ci95$pred, index.return = TRUE)$ix
x11()
plot(ci95$pred[sort.idx], type="l", xaxt="n",
ylab="estimates", xlab="observations (n=14)",
main="Estimate with 95% confidence region",
ylim=c(min(ci95[,4:5]), max(ci95[,4:5])))
lines(ci95$upper.ci[sort.idx], col="grey", lty=2)
lines(ci95$lower.ci[sort.idx], col="grey", lty=2)
# Partial dependency and individual conditional expectation (ICE)
pd=list()
for(i in 1:length(imp.vars)){
pd[[i]] <- partial(bot.fit, pred.var=imp.vars[i],
train=df.bottom[,imp.vars],
main=paste0("Partial dependency of ", imp.vars[i]),
plot = TRUE, ice=FALSE)
}
bot.fit
require(ranger)
require(pdp)
# Partial dependency and individual conditional expectation (ICE)
pd=list()
for(i in 1:length(imp.vars)){
pd[[i]] <- partial(bot.fit, pred.var=imp.vars[i],
train=df.bottom[,imp.vars],
main=paste0("Partial dependency of ", imp.vars[i]),
plot = TRUE, ice=FALSE)
}
print(pd[[1]], split = c(1, 1, 2, 2), more = TRUE)
print(pd[[2]], split = c(2, 1, 2, 2), more = TRUE)
print(pd[[3]], split = c(1, 2, 2, 2), more = TRUE)
imp.reg
bot.fit
# multicolinearity
( mc <- multi.collinear(df.bottom[,vars], p=0.005,  perm = TRUE, n = 999) )
mc.vars <- mc[which( mc$frequency > 5 ),]$variables
if(length(mc.vars) > 0) {
df.bottom <- df.bottom[,-which(names(df.bottom) %in% mc.vars)]
} else {
cat("No multicollinear variable found", "\n")
}
if(length(cl.vars) > 0) {
cat("Dropping colinear variables; ", cl.vars, "\n")
df.bottom <- df.bottom[,-which(names(df.bottom) %in% cl.vars)]
vars <- all.vars[-which(all.vars %in% cl.vars)]
} else {
cat("No collinear variable found", "\n")
}
invisible(lapply(c("randomForest", "rfUtilities",
"ranger", "pdp", "spatialEco"),require,
character.only=TRUE))
# set working directory
source("./R/rf.ImpScale.R")
pfun <- function(object, newdata, i = 2) {
predict(object, data = newdata)$predictions[,i]
}
rmse <- function(y,x) { sqrt(mean((y - x)^2)) }
set.seed(666)
#***********************************************
# read and filter top/bottom treatments
dat <- read.csv("atkins_test_data.csv")
df.bottom <- na.omit(dat[dat$treatment == "B",])
df.top <- na.omit(dat[dat$treatment == "T",])
# full variable list
all.vars <- c("richness","sw.index","evenness","dbh.sd","ba","gini","dbh_shan",
"rugosity","top_rugosity", "enl","fhd","porosity","clumping_index",
"mean_height_mean","moch","max_ht", "p10", "p25",
"p50", "p75","p90","cover_fraction")
#***********************************************
# Evaluate colinearity and multicolinearity
# remove collinearity
cl.vars <- spatialEco::collinear(df.bottom[,all.vars], p = 0.85,
nonlinear = FALSE, p.value = 0.001)
if(length(cl.vars) > 0) {
cat("Dropping colinear variables; ", cl.vars, "\n")
df.bottom <- df.bottom[,-which(names(df.bottom) %in% cl.vars)]
vars <- all.vars[-which(all.vars %in% cl.vars)]
} else {
cat("No collinear variable found", "\n")
}
df.bottom
# multicolinearity
( mc <- multi.collinear(df.bottom[,vars], p=0.005,  perm = TRUE, n = 999) )
mc.vars <- mc[which( mc$frequency > 5 ),]$variables
if(length(mc.vars) > 0) {
df.bottom <- df.bottom[,-which(names(df.bottom) %in% mc.vars)]
} else {
cat("No multicollinear variable found", "\n")
}
# Evaluate importance significance
( imp.reg <- ranger(x=df.bottom[,vars], y=df.bottom[,"temp"],
importance = "permutation",
num.trees=b) )
( imp <- na.omit(rf.ImpScale(imp.reg, scaling="p", n=59)) )
( imp.vars <- imp[imp$importance > 0 & imp$pvalue <= 0.1,]$parameter )
# ( imp.vars <- imp[imp$importance > 0,]$parameter )
# Fit model
( bot.fit <- ranger(x=df.bottom[,imp.vars], y=df.bottom[,"temp"],
importance = "permutation", num.trees=b,
keep.inbag=TRUE) )
bot.fit$predictions
bot.fit$r.squared
